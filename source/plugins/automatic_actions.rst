自動アクションを追加する
========================

新しく自動アクションを追加するのはかなり簡単です。

新しいアクションを作成する
---------------------

あなたの自動アクションは ``Kanboard\Action\Base`` クラスを継承しなければなりません。いくつかの抽象化メソッドはあなた自身で実装しなければなりません:

+---------------------------------------+---------------------------------------------+
| メソッド                                | 概要                                         |
+=======================================+=============================================+
| ``getDescription()``                  | ユーザーインターフェース内で概要を可視化   |
+---------------------------------------+---------------------------------------------+
| ``getCompatibleEvents()``             | 互換性のあるイベントのリストを取得           |
+---------------------------------------+---------------------------------------------+
| ``getActionRequiredParameters()``     | アクションに必要なパラメータを取得   |
|                                       | (ユーザーが定義)                       |
+---------------------------------------+---------------------------------------------+
| ``getEventRequiredParameters()``      | イベントに必要なパラメータを取得    |
+---------------------------------------+---------------------------------------------+
| ``doAction(array $data)``             | アクションを実行。成功時はtrueを     |
|                                       | 返さなければならない                                    |
+---------------------------------------+---------------------------------------------+
| ``hasRequiredCondition(array $data)`` | イベントのデータがアクションを     |
|                                       | 起こす条件に合ってるかチェックする                      |
+---------------------------------------+---------------------------------------------+

Kanboardは名前空間を含む絶対的なクラス名であなたの自動アクションを識別します。

新しいイベントを追加する
-----------------

アプリケーションのイベントのリストは ``Kanboard\Core\Event\EventManager::getAll()`` クラスで利用可能です・しかしながら、あなたが新しいイベントを作動させたいならば、これらのイベントを以下の要領で登録できます。

.. code:: php

    $this->actionManager->getAction('\Kanboard\Plugin\MyPlugin\MyActionName')->addEvent('my.event', 'My event description');

同じ方法で、互換性のあるイベントのリストの既存のアクションを拡張することができます。

アクションを登録する
----------------------

``Kanboard\Core\Action\ActionManager`` クラス内の ``register()`` メソッドを呼び出さなければなりません。 :

.. code:: php

    <?php

    namespace Kanboard\Plugin\AutomaticAction;

    use Kanboard\Core\Plugin\Base;
    use Kanboard\Plugin\AutomaticAction\Action\TaskRename;

    class Plugin extends Base
    {
        public function initialize()
        {
            $this->actionManager->register(new TaskRename($this->container));
        }
    }

例
-------

-  `自動アクションの例 <https://github.com/kanboard/plugin-example-automatic-action>`__
